{"version":3,"sources":["components/Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","react_default","a","createElement","className","name","age","children","mobin","type","onChange","changed","value","App","state","persons","showPersons","nameHandler","newName","_this","setState","inputHandler","event","target","switchHandler","doesShow","_this2","this","person","btn","padding","border","cursor","backgroundColor","color","style","onClick","bind","components_Person_Person","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAiBeA,SAdA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,qBACWH,EAAMK,KADjB,IACwBL,EAAMM,KAE9BL,EAAAC,EAAAC,cAAA,WAAMH,EAAMO,UACXP,EAAMQ,MACLP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,SAAUV,EAAMW,QAASC,MAAOZ,EAAMK,OACvD,QCmEKQ,oNAxEbC,MAAQ,CACNC,QAAS,CAAC,CAAEV,KAAM,QAASC,IAAK,IAAM,CAAED,KAAM,QAASC,IAAK,KAC5DU,aAAa,EACbR,OAAO,KAGTS,YAAc,SAAAC,GACRC,EAAKL,MAAMC,QAAQ,GAAGV,OAASa,EACjCC,EAAKC,SAAS,CACZL,QAAS,CAAC,CAAEV,KAAM,QAASC,IAAK,IAAM,CAAED,KAAM,QAASC,IAAK,OAG9Da,EAAKC,SAAS,CACZL,QAAS,CAAC,CAAEV,KAAMa,EAASZ,IAAK,IAAM,CAAED,KAAM,QAASC,IAAK,UAKlEe,aAAe,SAAAC,GACbH,EAAKC,SAAS,CACZL,QAAS,CACP,CAAEV,KAAM,QAASC,IAAK,IACtB,CAAED,KAAMiB,EAAMC,OAAOX,MAAON,IAAK,UAKvCkB,cAAgB,WACd,IAAMC,EAAWN,EAAKL,MAAME,YAC5BG,EAAKC,SAAS,CAAEJ,aAAcS,6EAGvB,IAAAC,EAAAC,KACDC,EAASD,KAAKb,MAAMC,QACtBA,EAAU,KACRc,EAAM,CACVC,QAAS,MACTC,OAAQ,iBACRC,OAAQ,UACRC,gBAAiB,QACjBC,MAAO,SAqBT,OAlBIP,KAAKb,MAAME,cACbD,EACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQgC,MAAON,EAAKO,QAAST,KAAKV,YAAYoB,KAAKV,KAAM,QAAzD,WAGA1B,EAAAC,EAAAC,cAACmC,EAAD,CAAQjC,KAAK,SAAb,eAAkC,MAClCJ,EAAAC,EAAAC,cAACmC,EAAD,CAAQjC,KAAMuB,EAAO,GAAGvB,KAAMC,IAAKsB,EAAO,GAAGtB,MAC7CL,EAAAC,EAAAC,cAACmC,EAAD,CACE9B,MAAOmB,KAAKb,MAAMN,MAClBH,KAAMuB,EAAO,GAAGvB,KAChBC,IAAKsB,EAAO,GAAGtB,IACfK,QAASgB,KAAKN,iBAOpBpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQgC,MAAON,EAAKO,QAAS,kBAAMV,EAAKF,kBAAxC,UAGCT,UAnESwB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9fcab5d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\n\r\nconst Person = props => {\r\n  return (\r\n    <div className=\"Person\">\r\n      <h3>\r\n        This is {props.name} {props.age}\r\n      </h3>\r\n      <div>{props.children}</div>\r\n      {props.mobin ? (\r\n        <input type=\"text\" onChange={props.changed} value={props.name} />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React, { Component } from 'react';\n\nimport Person from './components/Person/Person';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    persons: [{ name: 'Matin', age: 27 }, { name: 'Mobin', age: 26 }],\n    showPersons: false,\n    mobin: true\n  };\n\n  nameHandler = newName => {\n    if (this.state.persons[0].name === newName) {\n      this.setState({\n        persons: [{ name: 'Matin', age: 27 }, { name: 'Mobin', age: 26 }]\n      });\n    } else {\n      this.setState({\n        persons: [{ name: newName, age: 27 }, { name: 'Mobin', age: 26 }]\n      });\n    }\n  };\n\n  inputHandler = event => {\n    this.setState({\n      persons: [\n        { name: 'Matin', age: 27 },\n        { name: event.target.value, age: 26 }\n      ]\n    });\n  };\n\n  switchHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  render() {\n    const person = this.state.persons;\n    let persons = null;\n    const btn = {\n      padding: '8px',\n      border: '1px solid #eee',\n      cursor: 'pointer',\n      backgroundColor: 'green',\n      color: 'white'\n    };\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          <button style={btn} onClick={this.nameHandler.bind(this, 'Mat')}>\n            call me\n          </button>\n          <Person name=\"React\">Hello there {':)'}</Person>\n          <Person name={person[0].name} age={person[0].age} />\n          <Person\n            mobin={this.state.mobin}\n            name={person[1].name}\n            age={person[1].age}\n            changed={this.inputHandler}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <button style={btn} onClick={() => this.switchHandler()}>\n          Toggle\n        </button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}