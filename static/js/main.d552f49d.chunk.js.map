{"version":3,"sources":["components/Person/Person.js","ErrorBoundary/errorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","react_default","a","createElement","className","onClick","click","name","age","children","mobin","type","onChange","changed","value","ErrorBoundary","state","hasError","errorMessage","componentDidCatch","error","info","_this","setState","this","Component","App","persons","id","VIP","showPersons","awesomePhrase","nameHandler","newName","person","Object","objectSpread","toConsumableArray","inputHandler","event","target","deleteHandler","index","filter","length","some","p","switchHandler","doesShow","_this2","btn","padding","width","norder","cursor","backgroundColor","border","color","disabled","bind","components_Person_Person","map","errorBoundary","key","classes","push","console","log","style","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d552f49d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\n\r\nconst Person = props => {\r\n  return (\r\n    <div className=\"Person\">\r\n      <h3 onClick={props.click}>\r\n        This is {props.name} {props.age}\r\n      </h3>\r\n      <div>{props.children}</div>\r\n      <br />\r\n      <div>\r\n        {props.mobin ? (\r\n          <input type=\"text\" onChange={props.changed} value={props.name} />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n    errorMessage: ''\r\n  };\r\n\r\n  componentDidCatch = (error, info) => {\r\n    this.setState({ hasError: true, errorMessage: error });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div>\r\n          <h1>Oh no, something went wrong :O</h1>\r\n          <h2>{this.state.errorMessage}</h2>\r\n        </div>\r\n      );\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\n\r\nimport Person from './components/Person/Person';\r\nimport ErrorBoundary from './ErrorBoundary/errorBoundary';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    persons: [\r\n      { id: 1, name: 'Matin', age: 27 },\r\n      { id: 2, name: 'Mobin', age: 26 }\r\n    ],\r\n    VIP: { name: 'React' },\r\n    showPersons: false,\r\n    mobin: true,\r\n    awesomePhrase: ''\r\n  };\r\n\r\n  nameHandler = newName => {\r\n    const person = { ...this.state.persons[0] };\r\n    const persons = [...this.state.persons];\r\n\r\n    if (this.state.persons[0].name === newName) {\r\n      person.name = 'Matin';\r\n    } else {\r\n      person.name = newName;\r\n    }\r\n    persons[0] = person;\r\n    this.setState({ persons });\r\n  };\r\n\r\n  inputHandler = event => {\r\n    this.setState({\r\n      VIP: { name: event.target.value, age: 'immortal' }\r\n    });\r\n  };\r\n\r\n  deleteHandler = index => {\r\n    const persons = [...this.state.persons].filter(\r\n      person => person.id !== index\r\n    );\r\n\r\n    if (persons.length === 0) {\r\n      this.setState({ awesomePhrase: 'where did they all go?' });\r\n    }\r\n\r\n    if (persons.some(p => p.name !== 'Mobin')) {\r\n      this.setState({ awesomePhrase: 'Where is Mobin?' });\r\n    }\r\n    if (persons.some(p => p.name !== 'Matin')) {\r\n      this.setState({ awesomePhrase: 'Where is Matin?' });\r\n    }\r\n\r\n    this.setState({ persons });\r\n  };\r\n\r\n  switchHandler = () => {\r\n    const doesShow = this.state.showPersons;\r\n    this.setState({ showPersons: !doesShow });\r\n  };\r\n\r\n  render() {\r\n    // styling\r\n\r\n    const btn = {\r\n      padding: '8px',\r\n      width: '100px',\r\n      norder: '1px solid #eee',\r\n      cursor: 'pointer',\r\n      backgroundColor: 'green',\r\n      border: '1px solid lightgreen',\r\n      color: 'white'\r\n    };\r\n\r\n    // toggle\r\n    let persons = null;\r\n\r\n    if (this.state.showPersons) {\r\n      persons = (\r\n        <div className=\"person\">\r\n          <br />\r\n          <button\r\n            disabled={this.state.persons.length === 0}\r\n            className=\"btn call\"\r\n            onClick={this.nameHandler.bind(this, 'Mat')}>\r\n            call me\r\n          </button>\r\n          <br />\r\n          <Person\r\n            changed={this.inputHandler}\r\n            name={this.state.VIP.name}\r\n            mobin={this.state.mobin}>\r\n            Hello there {':)'}\r\n          </Person>\r\n          {this.state.persons.map(person => {\r\n            return (\r\n              <ErrorBoundary>\r\n                <Person\r\n                  key={person.id}\r\n                  name={person.name}\r\n                  age={person.age}\r\n                  click={() => this.deleteHandler(person.id)}\r\n                />\r\n              </ErrorBoundary>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n      btn.backgroundColor = 'red';\r\n      btn.color = 'white';\r\n    }\r\n\r\n    //\r\n    let awesomePhrase = '';\r\n    const classes = [];\r\n    if (!this.state.showPersons) {\r\n      awesomePhrase = 'Nobody is here, it seems :/';\r\n    }\r\n    if (this.state.showPersons && this.state.persons.length === 2) {\r\n      awesomePhrase = 'All aboard :D';\r\n    }\r\n    if (this.state.persons.length === 1) {\r\n      classes.push('bold');\r\n    }\r\n    if (this.state.persons.length === 0) {\r\n      classes.push('all');\r\n    }\r\n    console.log(this.state.persons.length);\r\n\r\n    // Final render\r\n    return (\r\n      <div className=\"App\">\r\n        <button style={btn} onClick={() => this.switchHandler()}>\r\n          Toggle\r\n        </button>\r\n        <h2 className={classes}>{this.state.awesomePhrase || awesomePhrase}</h2>\r\n        {persons}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}